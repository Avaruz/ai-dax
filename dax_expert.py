# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.5-flash-preview-05-20"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_bytes(
                    mime_type="application/json",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                types.Part.from_bytes(
                    mime_type="text/plain",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                types.Part.from_bytes(
                    mime_type="application/json",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                types.Part.from_text(text="""Dame las ventas por marca y pais"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""**Exploring Sales Breakdown**

I'm now implementing the `SUMMARIZECOLUMNS` function to delve into sales data. My current approach involves grouping by 'Marca' and 'DescPais' to see the USD totals for each group. I'm focusing on the sales breakdown, considering both brand and country. This should provide a detailed view of sales performance.


**Pinpointing Key Sales Metrics**

I've further refined my `SUMMARIZECOLUMNS` approach. Now, I'm integrating 'Marca' and 'País' into the calculations, while retaining the filter for specific channels. It's crucial to ensure precision with whole numbers in the USD totals for clearer analysis. My next step involves verifying the output's accuracy and presentation.


"""),
                types.Part.from_text(text="""EVALUATE
SUMMARIZECOLUMNS (
    'Marca'[Marca],
    'País'[DescPais],
    \"Ventas_Marca_Pais_USD\", CALCULATE (
        SUM ( 'Ventas Mensuales'[USD] ),
        KEEPFILTERS ( 'Canal'[IdCanal] IN { \"LIC\", \"EXT\", \"INS\", \"LOC\" } )
    )
)"""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""Dame las ventas por marca y país versus el año pasado ordenado de mayor a menor los 5 mejores"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""**Crafting DAX Query**

I'm currently working on crafting a DAX query to display sales figures. My focus is on breaking down sales by 'Marca' and 'País', comparing the current year's performance against the previous year's. I'm aiming to order the results by this year's sales, in descending order, and limit the output to the top 5 entries.


**Formulating the Core Logic**

I've made significant progress in defining the core logic for the DAX query. I've successfully identified how to determine the current and previous year's sales periods using `Período a Analizar'[Fecha]`. I'm now crafting the `CALCULATE` statements for 'Ventas_CY_YTD' and 'Ventas_PY_YTD', keeping the channel filter in mind. The growth calculation is also integrated. My next step is to ensure proper data type handling for the output.


"""),
                types.Part.from_text(text="""EVALUATE
TOPN(
    5,
    VAR MaxDataDateValue = MAX('Período a Analizar'[Fecha])
    VAR CurrentYear = YEAR(MaxDataDateValue)
    VAR StartOfCurrentYear_Date = DATE(CurrentYear, 1, 1)

    VAR CY_YTD_DateFilter =
        FILTER(
            ALLNOBLANKROW('Período a Analizar'[Fecha]),
            'Período a Analizar'[Fecha] >= StartOfCurrentYear_Date &&
            'Período a Analizar'[Fecha] <= MaxDataDateValue
        )

    VAR AnioAnterior = CurrentYear - 1
    VAR StartOfPreviousYear_Date = DATE(AnioAnterior, 1, 1)
    VAR EndOfPreviousYear_Comparable_Date = DATE(AnioAnterior, MONTH(MaxDataDateValue), DAY(MaxDataDateValue))

    VAR PY_YTD_DateFilter =
        FILTER(
            ALLNOBLANKROW('Período a Analizar'[Fecha]),
            'Período a Analizar'[Fecha] >= StartOfPreviousYear_Date &&
            'Período a Analizar'[Fecha] <= EndOfPreviousYear_Comparable_Date
        )

    VAR SpecifiedChannels = {\"LIC\", \"EXT\", \"INS\", \"LOC\"}

    VAR VentasPorMarcaPais =
        SUMMARIZECOLUMNS(
            'Marca'[Marca],
            'País'[DescPais],
            \"Ventas_CY_YTD\", CALCULATE(
                                TRUNC(SUM('Ventas Mensuales'[USD])),
                                CY_YTD_DateFilter,
                                KEEPFILTERS('Canal'[IdCanal] IN SpecifiedChannels)
                            ),
            \"Ventas_PY_YTD\", CALCULATE(
                                TRUNC(SUM('Ventas Mensuales'[USD])),
                                PY_YTD_DateFilter,
                                KEEPFILTERS('Canal'[IdCanal] IN SpecifiedChannels)
                            )
        )
    VAR VentasConCrecimiento =
        ADDCOLUMNS(
            VentasPorMarcaPais,
            \"Crecimiento_Nominal_USD\", COALESCE([Ventas_CY_YTD], 0) - COALESCE([Ventas_PY_YTD], 0)
        )
    RETURN
        VentasConCrecimiento,
    [Ventas_CY_YTD], DESC
)
ORDER BY
    [Ventas_CY_YTD] DESC"""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""entiendes los archivos json que te subi?
"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""**Assessing Data Comprehension**

I have successfully processed `modelo_datos.json` and `relaciones_del_datos.json`. My analysis of the provided data structures is complete, and I understand the key elements and relationships within them. I am ready to move on to the next instruction.


**Confirming Data Understanding**

I have a solid understanding of the `modelo_datos.json` and `relaciones_del_datos.json` files. I've processed the content and can confirm comprehension of their structure and contents. I'm ready to proceed with the next step, based on the established framework.


"""),
                types.Part.from_text(text="""Sí, entiendo los archivos JSON proporcionados (`modelo_datos.json` y `relaciones_del_datos.json`), los cuales describen el esquema del modelo de datos y sus relaciones."""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""y el archivo de google sheets
"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""**Investigating the Query**

I'm currently exploring the user's question, \"y el archivo de google sheets.\" My initial focus is to understand what the user wants in relation to the provided data files. I need to figure out what information the user is seeking regarding the Google Sheets file and the existing data files. I need to understand the connection between the user's question and what information they are seeking from the provided data.


**Assessing the Request**

I'm currently addressing the user's inquiry regarding the Google Sheets file, as requested. Initially, my focus centered on comprehending the connection of the provided JSON and FAQ data with any potential Google Sheets data, but there isn't one. The query's essence now hinges on the discrepancy: the user expects a Google Sheets file, but I have only the JSON and FAQ. My approach involves responding courteously, highlighting my current data availability, and signaling readiness to act should the Google Sheets file become available.


"""),
                types.Part.from_text(text="""No he recibido ningún archivo de Google Sheets. Solo tengo acceso a los archivos JSON (`modelo_datos.json` y `relaciones_del_datos.json`) y al archivo de texto (`FAQ.txt`) que me proporcionaste.

Si deseas que analice un archivo de Google Sheets, por favor, proporciónamelo."""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_bytes(
                    mime_type="text/csv",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                types.Part.from_text(text="""entiendes este archivo?
"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""**Assessing the Reference**

I'm reviewing the `DAX_Functions_Reference.csv` file, aiming to understand its content and relevance. It seems to be a DAX function reference, akin to a previous `.txt` document. While my internal knowledge is robust, I acknowledge the value of diverse information sources. I'll analyze the file to determine if it offers unique insights or alternative perspectives.


**Acknowledge the DAX File**

I've acknowledged the `DAX_Functions_Reference.csv` file, understanding its likely purpose as a DAX function reference. Despite my existing DAX knowledge, I'll analyze this new source for any fresh insights or alternative presentations. This ensures thorough assimilation of the provided context.


"""),
                types.Part.from_text(text="""Sí, entiendo el archivo `DAX_Functions_Reference.csv` que has proporcionado. Contiene una lista de funciones DAX, su tipo, descripción y sintaxis, lo cual es útil como referencia."""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""INSERT_INPUT_HERE"""),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text="""Propósito:

Eres un asistente experto en DAX y Microsoft Power BI. 



Tarea:

Tu tarea es analizar el siguiente esquema de modelo de datos y generar consultas DAX precisas basadas en las preguntas del usuario.



Contexto:

- Asegúrate de que la sintaxis sea correcta y verifica que la consulta sea correcta, para eso usa tu base de conocimiento DAX Functions Reference.

- Utiliza las tablas y columnas exactamente como se definen en el esquema, usa el conocimiento Modelo de datos de tu base de conocimiento.

- Envuelve los nombres de tablas con comillas simples si contienen espacios y las columnas con corchetes, ejemplo 'Marca'[Marca]

- Evita usar espacios en las variables usa _ en vez de espacios y da los nombres de las variables en español.

- Asume como indicador de Ventas, el campo [USD] de la tabla 'Ventas Mensuales'

- La tabla 'Período a Analizar' tiene los campos de fechas que debe usar

- La tabla principal de las Ventas es 'Ventas Mensuales'

- Usa [UNSTD] para las Unidades

- Respeta los acentos de los nombres del modelo como ser País

- Da los datos sin decimales

- Proporciona ÚNICAMENTE la consulta DAX como respuesta, sin explicaciones adicionales a menos que se te pida explícitamente

- Agrega este filtro siempre IdCanal por (\"LIC\", \"EXT\", \"INS\", \"LOC\")

- TA se refiere a Área Terapéutica

- No uses ñ para los nombres de las variables ya que DAX no lo soporta

- Cuando te hable de Molécula me refiero a SubFamilia



Formato: 

- Analiza el modelo de datos #modelo_datos.json y relaciones_del_modelo.json

- Revisa las el archivo [FAQ.txt] para ver como responder."""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()
