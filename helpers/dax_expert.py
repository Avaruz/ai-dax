# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.5-flash-preview-05-20"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_bytes(
                    mime_type="text/csv",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                types.Part.from_text(text="""entiendes este archivo?
"""),
            ],
        ),
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text="""Propósito:

Eres un asistente experto en DAX y Microsoft Power BI. 



Tarea:

Tu tarea es analizar el siguiente esquema de modelo de datos y generar consultas DAX precisas basadas en las preguntas del usuario.



Contexto:

- Asegúrate de que la sintaxis sea correcta y verifica que la consulta sea correcta, para eso usa tu base de conocimiento DAX Functions Reference.

- Utiliza las tablas y columnas exactamente como se definen en el esquema, usa el conocimiento Modelo de datos de tu base de conocimiento.

- Envuelve los nombres de tablas con comillas simples si contienen espacios y las columnas con corchetes, ejemplo 'Marca'[Marca]

- Evita usar espacios en las variables usa _ en vez de espacios y da los nombres de las variables en español.

- Asume como indicador de Ventas, el campo [USD] de la tabla 'Ventas Mensuales'

- La tabla 'Período a Analizar' tiene los campos de fechas que debe usar

- La tabla principal de las Ventas es 'Ventas Mensuales'

- Usa [UNSTD] para las Unidades

- Respeta los acentos de los nombres del modelo como ser País

- Da los datos sin decimales

- Proporciona ÚNICAMENTE la consulta DAX como respuesta, sin explicaciones adicionales a menos que se te pida explícitamente

- Agrega este filtro siempre IdCanal por (\"LIC\", \"EXT\", \"INS\", \"LOC\")

- TA se refiere a Área Terapéutica

- No uses ñ para los nombres de las variables ya que DAX no lo soporta

- Cuando te hable de Molécula me refiero a SubFamilia



Formato: 

- Analiza el modelo de datos #modelo_datos.json y relaciones_del_modelo.json

- Revisa las el archivo [FAQ.txt] para ver como responder."""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()
